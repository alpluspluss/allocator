name: jalloc ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        arch: [ x86_64, arm64 ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Clang
        uses: actions/cache@v3
        with:
          path: ~/.cache/clang
          restore-keys: |
            ${{ runner.os }}-clang-
          key: "${{ runner.os }}-clang-${{ hashFiles('**/CMakeLists.txt') }}"

      - name: Install Clang
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y clang
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            brew install llvm
            echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH  # Ensure the correct path for Clang
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            choco install llvm
          fi

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.29.0'

      - name: Configure Project
        run: |
          mkdir build
          cd build
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="-march=native"
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="-arch arm64 -mtune=native"
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_FLAGS="/arch:AVX2"  # Example for AVX2 on Windows
          fi

      - name: Build
        run: |
          cd build
          cmake --build . --config Release

      - name: Run Tests
        run: |
          cd build
          ctest --output-on-failure
